name: Update Changelog on PR (Disabled)

on:
  # Manual trigger only
  workflow_dispatch:
  # pull_request:
  #   types: [opened, synchronize, reopened]
  #   branches:
  #     - main

jobs:
  check-pr-type:
    runs-on: ubuntu-latest
    outputs:
      is_new_pr: ${{ github.event.action == 'opened' }}
    steps:
      - name: Check if new PR
        id: check_new_pr
        run: |
          if [ "${{ github.event.action }}" = "opened" ]; then
            echo "This is a new PR"
            echo "is_new_pr=true" >> $GITHUB_OUTPUT
          else
            echo "This is not a new PR"
            echo "is_new_pr=false" >> $GITHUB_OUTPUT
          fi

  generate-pr-changelog:
    runs-on: ubuntu-latest
    needs: check-pr-type
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r workflow-requirements.txt

      - name: Get PR diff information
        id: get_pr_diff
        run: |
          # Get the base and head commits for the PR
          PR_HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          PR_BASE_SHA="${{ github.event.pull_request.base.sha }}"

          # Get commits in this PR
          git log --pretty=format:"%h - %s (%an)" $PR_BASE_SHA..$PR_HEAD_SHA > pr_commits.txt

          # Get files changed in this PR
          git diff --name-status $PR_BASE_SHA..$PR_HEAD_SHA > pr_files_changed.txt

          # Get detailed diff of changed files (for context)
          git diff --stat $PR_BASE_SHA..$PR_HEAD_SHA > pr_diff_stats.txt

          # Output for debugging
          echo "PR diff between: $PR_BASE_SHA and $PR_HEAD_SHA"

      - name: Analyze PR labels
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          gh pr view $PR_NUMBER --json labels -q '.labels[].name' > pr_labels.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Gather library context
        id: gather_context
        run: |
          # Run the context extraction script
          python scripts/extract_changelog_context.py

      - name: Create context embeddings
        id: create_embeddings
        env:
          OPENAI_API_KEY: ${{ vars.OPENAI_API_KEY || secrets.OPENAI_API_KEY }}
        run: |
          # Generate embeddings for all context files to reduce token usage
          python scripts/create_changelog_embeddings.py

          # Store embedding statistics for monitoring
          echo "Embedding stats:"
          python -c "import json; from pathlib import Path; data = json.loads(Path('changelog_embeddings.json').read_text()); print(f\"\"\"Total files embedded: {len(data['embeddings'])}\"\"\"); total_tokens = sum(data['token_counts'].values()); print(f\"\"\"Total tokens in original files: {total_tokens}\"\"\")"

      - name: Generate changelog entry for PR
        id: generate_pr_changelog
        env:
          OPENAI_API_KEY: ${{ vars.OPENAI_API_KEY || secrets.OPENAI_API_KEY }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_NAME: ${{ github.repository }}
        run: |
          # Load embedding data for context
          EMBEDDINGS_DATA=$(cat changelog_embeddings.json || echo "{}")

          # Extract content samples for context
          CONTEXT=""
          if [ -f changelog_embeddings.json ]; then
            CONTEXT=$(python -c "import json; data = json.loads(open('changelog_embeddings.json').read()); print('\n'.join([f'--- {k} ---\n{v[:1000]}...' for k, v in data.get('content_samples', {}).items()]))")
          fi

          # Validate the OpenAI API key
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "Warning: OPENAI_API_KEY is not set or empty"
            echo "Falling back to traditional method..."
            python scripts/generate_changelog_entry.py > pr_changelog_entry.md
          else
            echo "OpenAI API key is set, proceeding with API call"
            
            # Create a temporary payload file for the API call
            cat > payload.json <<-EOF
            {
              "model": "gpt-4o",
              "messages": [
                {"role": "system", "content": "You are a changelog generator that creates detailed, structured entries for pull requests. Generate a concise changelog entry in markdown format for the PR."},
                {"role": "user", "content": "Generate a changelog entry for PR #${{ github.event.pull_request.number }} with title: \"${{ github.event.pull_request.title }}\". The PR description is: \"${{ github.event.pull_request.body }}\". Here is additional context about the codebase:\n\n${CONTEXT}"}
              ]
            }
            EOF
            
            # Validate JSON payload
            if ! jq empty payload.json 2>/dev/null; then
              echo "Error: Invalid JSON format in payload.json"
              exit 1
            fi
            
            # Make the API call with retries
            MAX_RETRIES=3
            RETRY_COUNT=0
            SUCCESS=false
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
              echo "API call attempt $(($RETRY_COUNT + 1))/$MAX_RETRIES"
              
              # Use a temporary file for API response
              curl -s -X POST https://api.openai.com/v1/chat/completions \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                --data-binary @payload.json > api_response.json
              
              # Check if the API call succeeded
              if jq -e '.choices[0].message.content' api_response.json > /dev/null 2>&1; then
                echo "API call successful"
                jq -r '.choices[0].message.content' api_response.json > pr_changelog_entry.md
                SUCCESS=true
              else
                echo "API call failed, response:"
                cat api_response.json
                RETRY_COUNT=$(($RETRY_COUNT + 1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "Retrying in 5 seconds..."
                  sleep 5
                fi
              fi
            done
            
            # Fall back to traditional method if API call fails
            if [ "$SUCCESS" = false ]; then
              echo "All API attempts failed, falling back to traditional method..."
              python scripts/generate_changelog_entry.py > pr_changelog_entry.md
            fi
          fi

          # Validate the generated content
          if [ ! -s pr_changelog_entry.md ]; then
            echo "Warning: Generated changelog is empty."
            echo "Creating a basic changelog entry as fallback..."
            cat > pr_changelog_entry.md <<-EOF
            ## [0.0.1] - $(date +%Y-%m-%d)
            
            ### Changes
            - PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}
            - Note: This is an automatically generated fallback entry.
            EOF
          fi

          # Debug output
          echo "Generated changelog content:"
          cat pr_changelog_entry.md

          # Save the output to GitHub step output
          echo "changelog_entry<<EOF" >> $GITHUB_OUTPUT
          cat pr_changelog_entry.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate developer critique
        id: generate_developer_critique
        env:
          OPENAI_API_KEY: ${{ vars.OPENAI_API_KEY || secrets.OPENAI_API_KEY }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_NAME: ${{ github.repository }}
        run: |
          # Generate a developer critique of the PR changes
          python scripts/generate_developer_critique.py

          # Validate the output
          if [ ! -s developer_critique.md ]; then
            echo "Warning: Developer critique generation failed. Creating a placeholder."
            echo "Developer critique could not be generated for this PR." > developer_critique.md
          fi

          # Save the output to GitHub step output using a more reliable approach
          {
            echo "developer_critique<<EOFDEV"
            cat developer_critique.md
            echo "EOFDEV"
          } >> $GITHUB_OUTPUT

      - name: Generate visual changelog
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_NAME: ${{ github.repository }}
        run: |
          # Generate visual HTML changelog
          python scripts/generate_changelog_html.py

      - name: Create or update PR changelog file
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"

          # Create the PR comment and save to a file
          cat pr_changelog_entry.md > "PR_${PR_NUMBER}_CHANGELOG.md"

          # Prepare comment with links to assets
          echo "## Changelog Preview for this PR:" > pr_comment.txt
          echo "" >> pr_comment.txt
          cat pr_changelog_entry.md >> pr_comment.txt
          echo "" >> pr_comment.txt
          echo "### Developer Critique:" >> pr_comment.txt
          echo "<details>" >> pr_comment.txt
          echo "<summary>Click to expand developer review</summary>" >> pr_comment.txt
          echo "" >> pr_comment.txt
          cat developer_critique.md >> pr_comment.txt
          echo "" >> pr_comment.txt
          echo "</details>" >> pr_comment.txt
          echo "" >> pr_comment.txt
          echo "### Additional resources:" >> pr_comment.txt
          echo "- [Release Notes](RELEASE_NOTES.md)" >> pr_comment.txt
          echo "" >> pr_comment.txt
          echo "This will be automatically added to CHANGELOG.md when merged." >> pr_comment.txt
          echo "" >> pr_comment.txt
          echo "💡 *Generated using vector embeddings for efficient token usage*" >> pr_comment.txt

          # Add a comment to the PR with the changelog preview
          gh pr comment $PR_NUMBER --body-file pr_comment.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload changelog assets
        uses: actions/upload-artifact@v4
        with:
          name: changelog-assets
          path: |
            pr_changelog_entry.md
            developer_critique.md
            RELEASE_NOTES.md
            changelog_visual.html
            impact_analysis.txt
            test_coverage_analysis.txt
            impact_analysis.json
            commit_categories.json
            commit_categories.txt
            changelog_embeddings.json

  update-changelog-on-merge:
    runs-on: ubuntu-latest
    # Only run this job when PR is merged to main
    if: github.event.pull_request.merged == true
    needs: generate-pr-changelog
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # We need to use a token with write permissions to push to main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download changelog assets
        uses: actions/download-artifact@v4
        with:
          name: changelog-assets

      - name: Update CHANGELOG.md
        run: |
          if [ -f CHANGELOG.md ]; then
            NEW_ENTRY=$(cat pr_changelog_entry.md)
            EXISTING=$(cat CHANGELOG.md)
            echo -e "$NEW_ENTRY\n\n$EXISTING" > CHANGELOG.md
          else
            HEADER="# Changelog\n\n"
            NEW_ENTRY=$(cat pr_changelog_entry.md)
            echo -e "$HEADER$NEW_ENTRY" > CHANGELOG.md
          fi

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add CHANGELOG.md

          # Also add release assets if available
          if [ -f RELEASE_NOTES.md ]; then
            git add RELEASE_NOTES.md
          fi
          if [ -f changelog_visual.html ]; then
            git add changelog_visual.html
          fi

          git commit -m "Update CHANGELOG.md with changes from PR #${{ github.event.pull_request.number }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
